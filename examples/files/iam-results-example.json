[
    {
        "AccountID": "N/A",
        "ManagedBy": "AWS",
        "Name": "AWSLambdaFullAccess",
        "PolicyName": "AWSLambdaFullAccess",
        "Type": "Policy",
        "Arn": "arn:aws:iam::aws:policy/AWSLambdaFullAccess",
        "ActionsCount": 150,
        "ServicesCount": 12,
        "Services": [
            "cloudwatch",
            "cognito-sync",
            "dynamodb",
            "events",
            "iam",
            "iot",
            "kinesis",
            "lambda",
            "logs",
            "s3",
            "sns",
            "sqs"
        ],
        "Actions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DeleteDashboards",
            "cloudwatch:DeleteInsightRules",
            "cloudwatch:DisableAlarmActions",
            "cloudwatch:DisableInsightRules",
            "cloudwatch:EnableAlarmActions",
            "cloudwatch:EnableInsightRules",
            "cloudwatch:PutDashboard",
            "cloudwatch:PutInsightRule",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:SetAlarmState",
            "cloudwatch:TagResource",
            "cloudwatch:UntagResource",
            "cognito-sync:SetCognitoEvents",
            "dynamodb:BatchWriteItem",
            "dynamodb:CreateBackup",
            "dynamodb:CreateGlobalTable",
            "dynamodb:CreateTable",
            "dynamodb:CreateTableReplica",
            "dynamodb:DeleteBackup",
            "dynamodb:DeleteItem",
            "dynamodb:DeleteTable",
            "dynamodb:DeleteTableReplica",
            "dynamodb:PutItem",
            "dynamodb:RestoreTableFromBackup",
            "dynamodb:RestoreTableToPointInTime",
            "dynamodb:TagResource",
            "dynamodb:UntagResource",
            "dynamodb:UpdateContinuousBackups",
            "dynamodb:UpdateContributorInsights",
            "dynamodb:UpdateGlobalTable",
            "dynamodb:UpdateGlobalTableSettings",
            "dynamodb:UpdateItem",
            "dynamodb:UpdateTable",
            "dynamodb:UpdateTableReplicaAutoScaling",
            "dynamodb:UpdateTimeToLive",
            "events:ActivateEventSource",
            "events:CreateEventBus",
            "events:CreatePartnerEventSource",
            "events:DeactivateEventSource",
            "events:DeleteEventBus",
            "events:DeletePartnerEventSource",
            "events:DeleteRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "events:TagResource",
            "events:UntagResource",
            "iam:PassRole",
            "iot:AttachPrincipalPolicy",
            "iot:CreateThing",
            "iot:CreateTopicRule",
            "iot:ReplaceTopicRule",
            "kinesis:PutRecord",
            "lambda:AddLayerVersionPermission",
            "lambda:AddPermission",
            "lambda:CreateAlias",
            "lambda:CreateFunction",
            "lambda:DeleteAlias",
            "lambda:DeleteEventSourceMapping",
            "lambda:DeleteFunction",
            "lambda:DeleteFunctionConcurrency",
            "lambda:DeleteFunctionEventInvokeConfig",
            "lambda:DeleteLayerVersion",
            "lambda:DeleteProvisionedConcurrencyConfig",
            "lambda:DisableReplication",
            "lambda:EnableReplication",
            "lambda:InvokeAsync",
            "lambda:InvokeFunction",
            "lambda:PublishLayerVersion",
            "lambda:PublishVersion",
            "lambda:PutFunctionConcurrency",
            "lambda:PutFunctionEventInvokeConfig",
            "lambda:PutProvisionedConcurrencyConfig",
            "lambda:RemoveLayerVersionPermission",
            "lambda:RemovePermission",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:UpdateAlias",
            "lambda:UpdateEventSourceMapping",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "lambda:UpdateFunctionEventInvokeConfig",
            "logs:AssociateKmsKey",
            "logs:CreateExportTask",
            "logs:CreateLogStream",
            "logs:DeleteLogGroup",
            "logs:DeleteLogStream",
            "logs:DeleteMetricFilter",
            "logs:DeleteRetentionPolicy",
            "logs:DeleteSubscriptionFilter",
            "logs:DisassociateKmsKey",
            "logs:PutLogEvents",
            "logs:PutMetricFilter",
            "logs:PutRetentionPolicy",
            "logs:PutSubscriptionFilter",
            "logs:TagLogGroup",
            "logs:UntagLogGroup",
            "s3:AbortMultipartUpload",
            "s3:BypassGovernanceRetention",
            "s3:CreateAccessPoint",
            "s3:CreateBucket",
            "s3:DeleteAccessPoint",
            "s3:DeleteAccessPointPolicy",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteBucketWebsite",
            "s3:DeleteObject",
            "s3:DeleteObjectTagging",
            "s3:DeleteObjectVersion",
            "s3:DeleteObjectVersionTagging",
            "s3:GetObject",
            "s3:ObjectOwnerOverrideToBucketOwner",
            "s3:PutAccelerateConfiguration",
            "s3:PutAccessPointPolicy",
            "s3:PutAnalyticsConfiguration",
            "s3:PutBucketAcl",
            "s3:PutBucketCORS",
            "s3:PutBucketLogging",
            "s3:PutBucketNotification",
            "s3:PutBucketObjectLockConfiguration",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketRequestPayment",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutBucketWebsite",
            "s3:PutEncryptionConfiguration",
            "s3:PutInventoryConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:PutMetricsConfiguration",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:PutObjectLegalHold",
            "s3:PutObjectRetention",
            "s3:PutObjectTagging",
            "s3:PutObjectVersionAcl",
            "s3:PutObjectVersionTagging",
            "s3:PutReplicationConfiguration",
            "s3:ReplicateDelete",
            "s3:ReplicateObject",
            "s3:ReplicateTags",
            "s3:RestoreObject",
            "s3:UpdateJobPriority",
            "s3:UpdateJobStatus",
            "sns:Publish",
            "sns:Subscribe",
            "sqs:SendMessage"
        ],
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "cloudformation:DescribeChangeSet",
                        "cloudformation:DescribeStackResources",
                        "cloudformation:DescribeStacks",
                        "cloudformation:GetTemplate",
                        "cloudformation:ListStackResources",
                        "cloudwatch:*",
                        "cognito-identity:ListIdentityPools",
                        "cognito-sync:GetCognitoEvents",
                        "cognito-sync:SetCognitoEvents",
                        "dynamodb:*",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeVpcs",
                        "events:*",
                        "iam:GetPolicy",
                        "iam:GetPolicyVersion",
                        "iam:GetRole",
                        "iam:GetRolePolicy",
                        "iam:ListAttachedRolePolicies",
                        "iam:ListRolePolicies",
                        "iam:ListRoles",
                        "iam:PassRole",
                        "iot:AttachPrincipalPolicy",
                        "iot:AttachThingPrincipal",
                        "iot:CreateKeysAndCertificate",
                        "iot:CreatePolicy",
                        "iot:CreateThing",
                        "iot:CreateTopicRule",
                        "iot:DescribeEndpoint",
                        "iot:GetTopicRule",
                        "iot:ListPolicies",
                        "iot:ListThings",
                        "iot:ListTopicRules",
                        "iot:ReplaceTopicRule",
                        "kinesis:DescribeStream",
                        "kinesis:ListStreams",
                        "kinesis:PutRecord",
                        "kms:ListAliases",
                        "lambda:*",
                        "logs:*",
                        "s3:*",
                        "sns:ListSubscriptions",
                        "sns:ListSubscriptionsByTopic",
                        "sns:ListTopics",
                        "sns:Publish",
                        "sns:Subscribe",
                        "sns:Unsubscribe",
                        "sqs:ListQueues",
                        "sqs:SendMessage",
                        "tag:GetResources",
                        "xray:PutTelemetryRecords",
                        "xray:PutTraceSegments"
                    ],
                    "Resource": "*"
                }
            ]
        },
        "AssumeRolePolicyDocument": null,
        "AssumableByComputeService": [],
        "PrivilegeEscalation": [
            {
                "type": "PassExistingRoleToNewLambdaThenInvoke",
                "actions": [
                    "iam:passrole",
                    "lambda:createfunction",
                    "lambda:invokefunction"
                ]
            },
            {
                "type": "PassExistingRoleToNewLambdaThenTriggerWithNewDynamo",
                "actions": [
                    "iam:passrole",
                    "lambda:createfunction",
                    "lambda:createeventsourcemapping",
                    "dynamodb:createtable",
                    "dynamodb:putitem"
                ]
            },
            {
                "type": "PassExistingRoleToNewLambdaThenTriggerWithExistingDynamo",
                "actions": [
                    "iam:passrole",
                    "lambda:createfunction",
                    "lambda:createeventsourcemapping"
                ]
            },
            {
                "type": "EditExistingLambdaFunctionWithRole",
                "actions": [
                    "lambda:updatefunctioncode"
                ]
            }
        ],
        "DataExfiltrationActions": [
            "s3:GetObject"
        ],
        "PermissionsManagementActions": [
            "iam:PassRole",
            "iot:AttachPrincipalPolicy",
            "lambda:AddLayerVersionPermission",
            "lambda:AddPermission",
            "lambda:DisableReplication",
            "lambda:EnableReplication",
            "lambda:RemoveLayerVersionPermission",
            "lambda:RemovePermission",
            "logs:DeleteResourcePolicy",
            "logs:PutResourcePolicy",
            "s3:BypassGovernanceRetention",
            "s3:DeleteAccessPointPolicy",
            "s3:DeleteBucketPolicy",
            "s3:ObjectOwnerOverrideToBucketOwner",
            "s3:PutAccessPointPolicy",
            "s3:PutAccountPublicAccessBlock",
            "s3:PutBucketAcl",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutObjectAcl",
            "s3:PutObjectVersionAcl"
        ]
    },
    {
        "AccountID": "N/A",
        "ManagedBy": "AWS",
        "Name": "AmazonRDSFullAccess",
        "PolicyName": "AmazonRDSFullAccess",
        "Type": "Policy",
        "Arn": "arn:aws:iam::aws:policy/AmazonRDSFullAccess",
        "ActionsCount": 84,
        "ServicesCount": 4,
        "Services": [
            "cloudwatch",
            "iam",
            "rds",
            "sns"
        ],
        "Actions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:PutMetricAlarm",
            "iam:CreateServiceLinkedRole",
            "rds:AddRoleToDBCluster",
            "rds:AddRoleToDBInstance",
            "rds:AddSourceIdentifierToSubscription",
            "rds:AddTagsToResource",
            "rds:ApplyPendingMaintenanceAction",
            "rds:AuthorizeDBSecurityGroupIngress",
            "rds:BacktrackDBCluster",
            "rds:CopyDBClusterParameterGroup",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBParameterGroup",
            "rds:CopyDBSnapshot",
            "rds:CopyOptionGroup",
            "rds:CreateDBCluster",
            "rds:CreateDBClusterEndpoint",
            "rds:CreateDBClusterParameterGroup",
            "rds:CreateDBClusterSnapshot",
            "rds:CreateDBInstance",
            "rds:CreateDBInstanceReadReplica",
            "rds:CreateDBParameterGroup",
            "rds:CreateDBSecurityGroup",
            "rds:CreateDBSnapshot",
            "rds:CreateDBSubnetGroup",
            "rds:CreateEventSubscription",
            "rds:CreateGlobalCluster",
            "rds:CreateOptionGroup",
            "rds:DeleteDBCluster",
            "rds:DeleteDBClusterEndpoint",
            "rds:DeleteDBClusterParameterGroup",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstance",
            "rds:DeleteDBParameterGroup",
            "rds:DeleteDBProxy",
            "rds:DeleteDBSecurityGroup",
            "rds:DeleteDBSnapshot",
            "rds:DeleteDBSubnetGroup",
            "rds:DeleteEventSubscription",
            "rds:DeleteGlobalCluster",
            "rds:DeleteOptionGroup",
            "rds:DeregisterDBProxyTargets",
            "rds:FailoverDBCluster",
            "rds:ModifyCurrentDBClusterCapacity",
            "rds:ModifyDBCluster",
            "rds:ModifyDBClusterEndpoint",
            "rds:ModifyDBClusterParameterGroup",
            "rds:ModifyDBClusterSnapshotAttribute",
            "rds:ModifyDBInstance",
            "rds:ModifyDBParameterGroup",
            "rds:ModifyDBProxy",
            "rds:ModifyDBProxyTargetGroup",
            "rds:ModifyDBSnapshot",
            "rds:ModifyDBSnapshotAttribute",
            "rds:ModifyDBSubnetGroup",
            "rds:ModifyEventSubscription",
            "rds:ModifyGlobalCluster",
            "rds:ModifyOptionGroup",
            "rds:PromoteReadReplica",
            "rds:PromoteReadReplicaDBCluster",
            "rds:PurchaseReservedDBInstancesOffering",
            "rds:RebootDBInstance",
            "rds:RegisterDBProxyTargets",
            "rds:RemoveFromGlobalCluster",
            "rds:RemoveRoleFromDBCluster",
            "rds:RemoveRoleFromDBInstance",
            "rds:RemoveSourceIdentifierFromSubscription",
            "rds:RemoveTagsFromResource",
            "rds:ResetDBClusterParameterGroup",
            "rds:ResetDBParameterGroup",
            "rds:RestoreDBClusterFromS3",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:RestoreDBClusterToPointInTime",
            "rds:RestoreDBInstanceFromDBSnapshot",
            "rds:RestoreDBInstanceFromS3",
            "rds:RestoreDBInstanceToPointInTime",
            "rds:RevokeDBSecurityGroupIngress",
            "rds:StartActivityStream",
            "rds:StartDBCluster",
            "rds:StartDBInstance",
            "rds:StopActivityStream",
            "rds:StopDBCluster",
            "rds:StopDBInstance",
            "sns:Publish"
        ],
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "rds:*",
                        "application-autoscaling:DeleteScalingPolicy",
                        "application-autoscaling:DeregisterScalableTarget",
                        "application-autoscaling:DescribeScalableTargets",
                        "application-autoscaling:DescribeScalingActivities",
                        "application-autoscaling:DescribeScalingPolicies",
                        "application-autoscaling:PutScalingPolicy",
                        "application-autoscaling:RegisterScalableTarget",
                        "cloudwatch:DescribeAlarms",
                        "cloudwatch:GetMetricStatistics",
                        "cloudwatch:PutMetricAlarm",
                        "cloudwatch:DeleteAlarms",
                        "ec2:DescribeAccountAttributes",
                        "ec2:DescribeAvailabilityZones",
                        "ec2:DescribeInternetGateways",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeVpcAttribute",
                        "ec2:DescribeVpcs",
                        "sns:ListSubscriptions",
                        "sns:ListTopics",
                        "sns:Publish",
                        "logs:DescribeLogStreams",
                        "logs:GetLogEvents"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                },
                {
                    "Action": "pi:*",
                    "Effect": "Allow",
                    "Resource": "arn:aws:pi:*:*:metrics/rds/*"
                },
                {
                    "Action": "iam:CreateServiceLinkedRole",
                    "Effect": "Allow",
                    "Resource": "*",
                    "Condition": {
                        "StringLike": {
                            "iam:AWSServiceName": [
                                "rds.amazonaws.com",
                                "rds.application-autoscaling.amazonaws.com"
                            ]
                        }
                    }
                }
            ]
        },
        "AssumeRolePolicyDocument": null,
        "AssumableByComputeService": [],
        "PrivilegeEscalation": [],
        "DataExfiltrationActions": [],
        "PermissionsManagementActions": [
            "rds:AuthorizeDBSecurityGroupIngress",
            "iam:CreateServiceLinkedRole"
        ]
    },
    {
        "AccountID": "N/A",
        "ManagedBy": "AWS",
        "Name": "CloudWatchFullAccess",
        "PolicyName": "CloudWatchFullAccess",
        "Type": "Policy",
        "Arn": "arn:aws:iam::aws:policy/CloudWatchFullAccess",
        "ActionsCount": 38,
        "ServicesCount": 3,
        "Services": [
            "cloudwatch",
            "logs",
            "sns"
        ],
        "Actions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DeleteDashboards",
            "cloudwatch:DeleteInsightRules",
            "cloudwatch:DisableAlarmActions",
            "cloudwatch:DisableInsightRules",
            "cloudwatch:EnableAlarmActions",
            "cloudwatch:EnableInsightRules",
            "cloudwatch:PutDashboard",
            "cloudwatch:PutInsightRule",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:SetAlarmState",
            "cloudwatch:TagResource",
            "cloudwatch:UntagResource",
            "logs:AssociateKmsKey",
            "logs:CreateExportTask",
            "logs:CreateLogStream",
            "logs:DeleteLogGroup",
            "logs:DeleteLogStream",
            "logs:DeleteMetricFilter",
            "logs:DeleteRetentionPolicy",
            "logs:DeleteSubscriptionFilter",
            "logs:DisassociateKmsKey",
            "logs:PutLogEvents",
            "logs:PutMetricFilter",
            "logs:PutRetentionPolicy",
            "logs:PutSubscriptionFilter",
            "logs:TagLogGroup",
            "logs:UntagLogGroup",
            "sns:AddPermission",
            "sns:ConfirmSubscription",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:Publish",
            "sns:RemovePermission",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:TagResource",
            "sns:UntagResource"
        ],
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "autoscaling:Describe*",
                        "cloudwatch:*",
                        "logs:*",
                        "sns:*",
                        "iam:GetPolicy",
                        "iam:GetPolicyVersion",
                        "iam:GetRole"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": "iam:CreateServiceLinkedRole",
                    "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*",
                    "Condition": {
                        "StringLike": {
                            "iam:AWSServiceName": "events.amazonaws.com"
                        }
                    }
                }
            ]
        },
        "AssumeRolePolicyDocument": null,
        "AssumableByComputeService": [],
        "PrivilegeEscalation": [],
        "DataExfiltrationActions": [],
        "PermissionsManagementActions": [
            "logs:DeleteResourcePolicy",
            "logs:PutResourcePolicy",
            "sns:AddPermission",
            "sns:CreateTopic",
            "sns:RemovePermission",
            "sns:SetTopicAttributes"
        ]
    },
    {
        "AccountID": "012345678901",
        "ManagedBy": "Customer",
        "Name": "MyRole",
        "PolicyName": "EC2-IAM-example",
        "Type": "Role",
        "Arn": "arn:aws:iam::012345678901:role/MyRole",
        "ActionsCount": 5,
        "ServicesCount": 2,
        "Services": [
            "ec2",
            "iam"
        ],
        "Actions": [
            "ec2:AssociateIamInstanceProfile",
            "ec2:DisassociateIamInstanceProfile",
            "iam:AddRoleToInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:PassRole"
        ],
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "VisualEditor0",
                    "Effect": "Allow",
                    "Action": [
                        "iam:CreateInstanceProfile",
                        "iam:ListInstanceProfilesForRole",
                        "iam:PassRole",
                        "ec2:DescribeIamInstanceProfileAssociations",
                        "iam:GetInstanceProfile",
                        "ec2:DisassociateIamInstanceProfile",
                        "ec2:AssociateIamInstanceProfile",
                        "iam:AddRoleToInstanceProfile"
                    ],
                    "Resource": "*"
                }
            ]
        },
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ssm.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        },
        "AssumableByComputeService": [],
        "PrivilegeEscalation": [],
        "DataExfiltrationActions": [],
        "PermissionsManagementActions": [
            "iam:AddRoleToInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:PassRole"
        ]
    },
    {
        "AccountID": "012345678901",
        "ManagedBy": "Customer",
        "Name": "InsecurePolicy",
        "PolicyName": "InsecurePolicy",
        "Type": "Policy",
        "Arn": "arn:aws:iam::012345678901:policy/InsecurePolicy",
        "ActionsCount": 2,
        "ServicesCount": 1,
        "Services": [
            "s3"
        ],
        "Actions": [
            "s3:PutObject",
            "s3:PutObjectAcl"
        ],
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "VisualEditor0",
                    "Effect": "Allow",
                    "Action": [
                        "s3:PutObject",
                        "s3:PutObjectAcl"
                    ],
                    "Resource": [
                        "*"
                    ]
                }
            ]
        },
        "AssumeRolePolicyDocument": null,
        "AssumableByComputeService": [],
        "PrivilegeEscalation": [],
        "DataExfiltrationActions": [],
        "PermissionsManagementActions": [
            "s3:PutObjectAcl"
        ]
    },
    {
        "AccountID": "012345678901",
        "ManagedBy": "Customer",
        "Name": "userwithlotsofpermissions",
        "PolicyName": "InsecureUserPolicy",
        "Type": "User",
        "Arn": "arn:aws:iam::012345678901:user/userwithlotsofpermissions",
        "ActionsCount": 3,
        "ServicesCount": 1,
        "Services": [
            "s3"
        ],
        "Actions": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:PutObjectAcl"
        ],
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "VisualEditor0",
                    "Effect": "Allow",
                    "Action": [
                        "s3:PutObject",
                        "s3:PutObjectAcl",
                        "s3:GetObject"
                    ],
                    "Resource": [
                        "*"
                    ]
                }
            ]
        },
        "AssumeRolePolicyDocument": null,
        "AssumableByComputeService": [],
        "PrivilegeEscalation": [],
        "DataExfiltrationActions": [
            "s3:GetObject"
        ],
        "PermissionsManagementActions": [
            "s3:PutObjectAcl"
        ]
    },
    {
        "AccountID": "012345678901",
        "ManagedBy": "Customer",
        "Name": "MyOtherRole",
        "PolicyName": "MyOtherRolePolicy",
        "Type": "Role",
        "Arn": "arn:aws:iam::012345678901:role/MyOtherRole",
        "ActionsCount": 5,
        "ServicesCount": 2,
        "Services": [
            "ec2",
            "iam"
        ],
        "Actions": [
            "ec2:AssociateIamInstanceProfile",
            "ec2:DisassociateIamInstanceProfile",
            "iam:AddRoleToInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:PassRole"
        ],
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "VisualEditor0",
                    "Effect": "Allow",
                    "Action": [
                        "iam:CreateInstanceProfile",
                        "iam:ListInstanceProfilesForRole",
                        "iam:PassRole",
                        "ec2:DescribeIamInstanceProfileAssociations",
                        "iam:GetInstanceProfile",
                        "ec2:DisassociateIamInstanceProfile",
                        "ec2:AssociateIamInstanceProfile",
                        "iam:AddRoleToInstanceProfile"
                    ],
                    "Resource": "*"
                }
            ]
        },
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        },
        "AssumableByComputeService": [
            "ec2"
        ],
        "PrivilegeEscalation": [],
        "DataExfiltrationActions": [],
        "PermissionsManagementActions": [
            "iam:AddRoleToInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:PassRole"
        ]
    },
    {
        "AccountID": "012345678901",
        "ManagedBy": "Customer",
        "Name": "OverprivilegedEC2",
        "PolicyName": "OverprivilegedEC2",
        "Type": "Role",
        "Arn": "arn:aws:iam::012345678901:role/OverprivilegedEC2",
        "ActionsCount": 3,
        "ServicesCount": 3,
        "Services": [
            "iam",
            "s3",
            "secretsmanager"
        ],
        "Actions": [
            "iam:CreateAccessKey",
            "s3:GetObject",
            "secretsmanager:GetSecretValue"
        ],
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "VisualEditor0",
                    "Effect": "Allow",
                    "Action": [
                        "secretsmanager:GetSecretValue",
                        "s3:GetObject",
                        "iam:CreateAccessKey"
                    ],
                    "Resource": "*"
                }
            ]
        },
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        },
        "AssumableByComputeService": [
            "ec2"
        ],
        "PrivilegeEscalation": [
            {
                "type": "CreateAccessKey",
                "actions": [
                    "iam:createaccesskey"
                ]
            }
        ],
        "DataExfiltrationActions": [
            "s3:GetObject",
            "secretsmanager:GetSecretValue"
        ],
        "PermissionsManagementActions": [
            "iam:CreateAccessKey"
        ]
    }
]